from typing import Protocol
import google.generativeai as genai
from anthropic import AnthropicBedrock

# Protocol Class
class BaseLLM(Protocol):
    def generate_content(self, content: str) -> str:
        ...


# Claude LLM Class
class ClaudeLLM(BaseLLM):
    def __init__(self, model_id: str, temperature: float, aws_region: str) -> None:
        self._client = AnthropicBedrock(aws_region=aws_region)
        self._model_id = model_id
        self._temperature = temperature

    def generate_content(self, content: str) -> str:
        response = self._client.messages.create(
            temperature=self._temperature,
            model=self._model_id,
            max_tokens=1024,
            messages=[{"role": "user", "content": content}]
        )
        output = response.content[-1].text
        return output


# Gemini LLM Class
class GeminiLLM(BaseLLM):
    def __init__(self, model_id: str):
        self._model = genai.GenerativeModel(model_id)
    
    def generate_content(self, content: str) -> str:
        response = self._model.generate_content(content)
        if response.candidates and len(response.candidates) > 0:
            candidate = response.candidates[0]
            return candidate.content.parts[0].text.strip() if hasattr(candidate, 'content') and hasattr(candidate.content, 'parts') else None
        else:
            return "No response generated by Gemini."
